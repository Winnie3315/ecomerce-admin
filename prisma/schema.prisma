generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Store {
  id         String      @id @default(uuid())
  name       String
  userId     String
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  billboards Billboard[] @relation("StoreToBillboard")
  categories Category[]  @relation("StoreToCategory")
  color      Color[]     @relation("StoreToColor")
  Product    Product[]   @relation("StoreToProduct")
  order      Order[]     @relation("StoreToOrder")
  sizes      Size[]      @relation("StoreToSize")
}

model Billboard {
  id         String     @id @default(uuid())
  storeId    String
  label      String
  imageUrl   String
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  store      Store      @relation("StoreToBillboard", fields: [storeId], references: [id])
  categories Category[]

  @@index([storeId])
}

model Category {
  id          String    @id @default(uuid())
  storeId     String
  billboardId String
  imageUrl    String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  name        String
  billboard   Billboard @relation(fields: [billboardId], references: [id])
  store       Store     @relation("StoreToCategory", fields: [storeId], references: [id])
  product     Product[] @relation("CategoryToProduct")

  @@index([storeId])
  @@index([billboardId])
}

model Size {
  id        String    @id @default(uuid())
  storeId   String
  name      String
  value     String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  product   Product[] @relation("SizeToProduct")
  store     Store     @relation("StoreToSize", fields: [storeId], references: [id])

  @@index([storeId])
}

model Color {
  id        String    @id @default(uuid())
  storeId   String
  name      String
  value     String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  store     Store     @relation("StoreToColor", fields: [storeId], references: [id])
  product   Product[] @relation("ColorToProduct")

  @@index([storeId])
}

model Product {
  id          String      @id @default(uuid())
  storeId     String
  store       Store       @relation("StoreToProduct", fields: [storeId], references: [id])
  categoryId  String
  category    Category    @relation("CategoryToProduct", fields: [categoryId], references: [id])
  name        String
  price       Decimal
  discount    Int?        @default(0)
  description String?
  isFeatured  Boolean     @default(false)
  isArchived  Boolean     @default(false)
  colorId     String
  sizeId      String
  color       Color       @relation("ColorToProduct", fields: [colorId], references: [id])
  size        Size        @relation("SizeToProduct", fields: [sizeId], references: [id])
  images      Image[]
  orderItems  OrderItem[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([storeId])
  @@index([categoryId])
}

model Image {
  id        String   @id @default(uuid())
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
}

model Order {
  id         String      @id @default(uuid())
  storeId    String
  store      Store       @relation("StoreToOrder", fields: [storeId], references: [id])
  orderItems OrderItem[]
  isPaid     Boolean     @default(false)
  phone      String      @default("")
  address    String      @default("")
  createdAt  DateTime    @default(now())
  userId     String?
  user       User?       @relation(fields: [userId], references: [id])
  updatedAt  DateTime    @updatedAt

  @@index([storeId])
}
model User {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  address   String
  phone     String
  company   String?
  orders    Order[]
  createdAt DateTime @default(now())
}

model OrderItem {
  id        String  @id @default(uuid())
  orderId   String
  order     Order   @relation(fields: [orderId], references: [id])
  productId String
  product   Product @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@index([productId])
}
